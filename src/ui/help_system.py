import pygame
from typing import List, Dict, Tuple
from src.core.constants import *

class HelpPage:
    """Represents a single help page with content"""
    def __init__(self, title: str, content: List[str], tips: List[str] = None):
        self.title = title
        self.content = content
        self.tips = tips or []

class HelpSystem:
    """
    Comprehensive help system with multiple pages of instructions and tips
    """
    
    def __init__(self, screen):
        self.screen = screen
        self.visible = False
        self.current_page = 0
        
        # Fonts
        self.font_title = pygame.font.Font(None, 28)
        self.font_heading = pygame.font.Font(None, 24)
        self.font_normal = pygame.font.Font(None, 20)
        self.font_small = pygame.font.Font(None, 18)
        
        # Colors
        self.bg_color = (20, 25, 35, 240)
        self.panel_color = (45, 55, 70, 220)
        self.border_color = (100, 120, 150)
        self.text_color = (255, 255, 255)
        self.heading_color = (150, 200, 255)
        self.tip_color = (255, 220, 100)
        self.key_color = (100, 255, 100)
        
        # Panel dimensions
        self.panel_width = 700
        self.panel_height = 500
        self.panel_x = (SCREEN_WIDTH - self.panel_width) // 2
        self.panel_y = (SCREEN_HEIGHT - self.panel_height) // 2
        
        self.scroll_offset = 0
        self.max_scroll = 0
        
        self._create_help_pages()
    
    def _create_help_pages(self):
        """Create all help pages with comprehensive information"""
        self.pages = [
            # Page 1: Basic Controls
            HelpPage(
                "Basic Controls & Movement",
                [
                    "üéÆ MOVEMENT:",
                    "‚Ä¢ WASD or Arrow Keys - Move your character",
                    "‚Ä¢ Mouse - Click to move to a location",
                    "",
                    "üéØ CAMERA:",
                    "‚Ä¢ Camera automatically follows your character",
                    "‚Ä¢ Stay within the map boundaries",
                    "",
                    "‚è∏Ô∏è GAME CONTROL:",
                    "‚Ä¢ ESC - Pause game / Open pause menu",
                    "‚Ä¢ F5 - Save game",
                    "",
                    "üèÉ SPEED CONTROL:",
                    "‚Ä¢ Speed controller in top-left corner",
                    "‚Ä¢ Click + and - buttons to adjust game speed",
                    "‚Ä¢ F6 - Toggle speed controller visibility",
                ],
                [
                    "üí° TIP: Click anywhere on the map to make your character walk there!",
                    "üí° TIP: Use the speed controller to slow down or speed up the game",
                    "üí° TIP: Save frequently with F5 to preserve your progress"
                ]
            ),
            
            # Page 2: NPC Interaction
            HelpPage(
                "NPC Interaction & Communication",
                [
                    "üë• FINDING NPCs:",
                    "‚Ä¢ NPCs wander around the map with colorful names above them",
                    "‚Ä¢ Check the NPC panel on the right side for their status",
                    "",
                    "üí¨ TALKING TO NPCs:",
                    "‚Ä¢ E - Quick interact with nearby NPCs",
                    "‚Ä¢ C or T - Open chat interface with nearby NPCs",
                    "‚Ä¢ Left Click - Select an NPC to see details",
                    "",
                    "üó®Ô∏è CHAT INTERFACE:",
                    "‚Ä¢ Type messages and press Enter to send",
                    "‚Ä¢ NPCs will respond with AI-generated replies",
                    "‚Ä¢ ESC - Close chat interface",
                    "",
                    "üìä NPC INFORMATION:",
                    "‚Ä¢ Right panel shows NPC names, moods, and activities",
                    "‚Ä¢ Selected NPC shows detailed needs and relationships",
                    "‚Ä¢ Mood indicators: üòä Happy, üòî Sad, üò† Angry, etc.",
                ],
                [
                    "üí° TIP: NPCs have personalities and remember your interactions!",
                    "üí° TIP: Click on NPCs to select them and see detailed information",
                    "üí° TIP: NPCs' moods affect how they respond to you"
                ]
            ),
            
            # Page 3: Player Needs & House System
            HelpPage(
                "Player Needs & House System",
                [
                    "üìä PLAYER NEEDS (Bottom-left panel):",
                    "‚Ä¢ Food - Hunger level (red when low)",
                    "‚Ä¢ Energy - Sleep level (blue/purple when low)", 
                    "‚Ä¢ Social - Social interaction level (blue when low)",
                    "‚Ä¢ Fun - Entertainment level (yellow when low)",
                    "",
                    "üè† YOUR HOUSE:",
                    "‚Ä¢ H - Enter/exit your house when nearby",
                    "‚Ä¢ Look for the interactive house building on the map",
                    "",
                    "üõèÔ∏è HOUSE ACTIVITIES:",
                    "‚Ä¢ Bed - Sleep to restore energy (+80% sleep, +30% fun)",
                    "‚Ä¢ Kitchen - Cook and eat (+60% hunger, +10% fun)",
                    "‚Ä¢ Living Room - Relax and watch TV (+40% fun, +10% sleep)",
                    "‚Ä¢ Bathroom - Freshen up (small boosts to all needs)",
                    "",
                    "üéÆ HOUSE CONTROLS:",
                    "‚Ä¢ E or Space - Interact with nearby furniture",
                    "‚Ä¢ Left Click - Click directly on furniture",
                    "‚Ä¢ H or ESC - Exit house",
                ],
                [
                    "üí° TIP: Keep an eye on your needs - low needs affect your character!",
                    "üí° TIP: Visit your house regularly to maintain your needs",
                    "üí° TIP: Different furniture restores different needs"
                ]
            ),
            
            # Page 4: Skills & Resources
            HelpPage(
                "Skills & Resource System",
                [
                    "üìà SKILLS SYSTEM:",
                    "‚Ä¢ 10 different skills to master: Farming, Mining, Foraging, etc.",
                    "‚Ä¢ Gain experience by performing related activities",
                    "‚Ä¢ Higher levels provide better yields and bonuses",
                    "‚Ä¢ Earn skill points when leveling up",
                    "",
                    "üéí INVENTORY MANAGEMENT:",
                    "‚Ä¢ I - Open inventory (36 slots)",
                    "‚Ä¢ Items have quality stars (1-5 ‚≠ê)",
                    "‚Ä¢ Different item types: Resources, Tools, Food, etc.",
                    "‚Ä¢ Gold currency for buying and selling",
                    "",
                    "‚öíÔ∏è RESOURCE GATHERING:",
                    "‚Ä¢ R - Harvest nearby resources (trees, rocks, plants)",
                    "‚Ä¢ Different tools required for different resources",
                    "‚Ä¢ Resources regenerate over time",
                    "‚Ä¢ Higher skill levels = better yields",
                    "",
                    "üî® CRAFTING SYSTEM:",
                    "‚Ä¢ J - Open crafting menu",
                    "‚Ä¢ Combine resources to create new items",
                    "‚Ä¢ Unlock recipes by leveling skills",
                    "‚Ä¢ Craft tools, food, and furniture",
                ],
                [
                    "üí° TIP: Start by harvesting wood and stone to get basic resources",
                    "üí° TIP: Check your skills (K key) to see progress and bonuses",
                    "üí° TIP: Higher quality items sell for more gold"
                ]
            ),
            
            # Page 5: Advanced Features
            HelpPage(
                "Advanced Features & UI",
                [
                    "üîß DEBUG & MONITORING:",
                    "‚Ä¢ F1 - Toggle help system (this window)",
                    "‚Ä¢ F2 - Toggle AI response box",
                    "‚Ä¢ F3 - Toggle cost monitor",
                    "‚Ä¢ F4 - Reset session costs",
                    "‚Ä¢ F7 - Toggle data analysis panel",
                    "‚Ä¢ F8 - Clear AI responses",
                    "‚Ä¢ F12 - Toggle debug information",
                    "",
                    "‚ö° AI SYSTEM:",
                    "‚Ä¢ NPCs use AI to make decisions and respond",
                    "‚Ä¢ AI responses appear in the response box",
                    "‚Ä¢ Costs are monitored in the cost panel",
                    "",
                    "üìÖ TIME SYSTEM:",
                    "‚Ä¢ Game has its own time that progresses",
                    "‚Ä¢ NPCs follow daily routines",
                    "‚Ä¢ Events may occur at specific times",
                    "",
                    "üé™ EVENTS:",
                    "‚Ä¢ Special events appear in the top-center panel",
                    "‚Ä¢ NPCs may attend or react to events",
                    "‚Ä¢ Events can affect NPC moods and behaviors",
                ],
                [
                    "üí° TIP: Use F2 to see what NPCs are thinking and deciding",
                    "üí° TIP: The data analysis panel shows detailed game statistics",
                    "üí° TIP: Events create dynamic interactions between NPCs"
                ]
            ),
            
            # Page 5: Troubleshooting & Tips
            HelpPage(
                "Troubleshooting & Pro Tips",
                [
                    "‚ùì COMMON ISSUES:",
                    "‚Ä¢ NPCs not responding? Check if AI is properly configured",
                    "‚Ä¢ Can't enter house? Make sure you're close enough (80 pixels)",
                    "‚Ä¢ Chat not working? Try clicking the NPC first to select them",
                    "‚Ä¢ Game too fast/slow? Use the speed controller (top-left)",
                    "",
                    "üéØ PRO TIPS:",
                    "‚Ä¢ Save regularly with F5 to avoid losing progress",
                    "‚Ä¢ Monitor your needs to maintain optimal character performance",
                    "‚Ä¢ Build relationships with NPCs through regular interaction",
                    "‚Ä¢ Use the pause menu (ESC) to access settings",
                    "",
                    "üîÑ PERFORMANCE:",
                    "‚Ä¢ Close unused UI panels to improve performance",
                    "‚Ä¢ Lower game speed if experiencing lag",
                    "‚Ä¢ Use F12 to check FPS and debug information",
                    "",
                    "üíæ SAVING & LOADING:",
                    "‚Ä¢ Game auto-saves every 5 minutes",
                    "‚Ä¢ Manual save with F5",
                    "‚Ä¢ Progress includes NPC relationships and memories",
                ],
                [
                    "üí° TIP: This is a life simulation - take your time and explore!",
                    "üí° TIP: NPCs have complex AI - every interaction matters",
                    "üí° TIP: Check the right panel to see what NPCs are up to"
                ]
            )
        ]
    
    def show(self):
        """Show the help system"""
        self.visible = True
        self.current_page = 0
        self.scroll_offset = 0
    
    def hide(self):
        """Hide the help system"""
        self.visible = False
    
    def toggle(self):
        """Toggle help system visibility"""
        if self.visible:
            self.hide()
        else:
            self.show()
    
    def next_page(self):
        """Go to next page"""
        if self.current_page < len(self.pages) - 1:
            self.current_page += 1
            self.scroll_offset = 0
    
    def prev_page(self):
        """Go to previous page"""
        if self.current_page > 0:
            self.current_page -= 1
            self.scroll_offset = 0
    
    def scroll_up(self):
        """Scroll content up"""
        self.scroll_offset = max(0, self.scroll_offset - 20)
    
    def scroll_down(self):
        """Scroll content down"""
        self.scroll_offset = min(self.max_scroll, self.scroll_offset + 20)
    
    def handle_event(self, event) -> bool:
        """Handle help system events"""
        if not self.visible:
            return False
        
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE or event.key == pygame.K_F1:
                self.hide()
                return True
            elif event.key == pygame.K_LEFT:
                self.prev_page()
                return True
            elif event.key == pygame.K_RIGHT:
                self.next_page()
                return True
            elif event.key == pygame.K_UP:
                self.scroll_up()
                return True
            elif event.key == pygame.K_DOWN:
                self.scroll_down()
                return True
        
        elif event.type == pygame.MOUSEBUTTONDOWN:
            if event.button == 1:  # Left click
                mouse_x, mouse_y = event.pos
                
                # Check if click is on navigation buttons
                if self._is_in_nav_area(mouse_x, mouse_y):
                    self._handle_nav_click(mouse_x, mouse_y)
                    return True
                
                # Check if click is outside panel (close help)
                panel_rect = pygame.Rect(self.panel_x, self.panel_y, self.panel_width, self.panel_height)
                if not panel_rect.collidepoint(mouse_x, mouse_y):
                    self.hide()
                    return True
        
        elif event.type == pygame.MOUSEWHEEL:
            if event.y > 0:
                self.scroll_up()
            else:
                self.scroll_down()
            return True
        
        return True  # Consume all events when visible
    
    def _is_in_nav_area(self, mouse_x: int, mouse_y: int) -> bool:
        """Check if mouse is in navigation area"""
        nav_y = self.panel_y + self.panel_height - 40
        return (self.panel_x <= mouse_x <= self.panel_x + self.panel_width and
                nav_y <= mouse_y <= nav_y + 30)
    
    def _handle_nav_click(self, mouse_x: int, mouse_y: int):
        """Handle navigation button clicks"""
        # Previous button
        prev_button_x = self.panel_x + 20
        prev_button_width = 80
        
        # Next button  
        next_button_x = self.panel_x + self.panel_width - 100
        next_button_width = 80
        
        if prev_button_x <= mouse_x <= prev_button_x + prev_button_width:
            self.prev_page()
        elif next_button_x <= mouse_x <= next_button_x + next_button_width:
            self.next_page()
    
    def draw(self):
        """Draw the help system"""
        if not self.visible:
            return
        
        # Semi-transparent background overlay
        overlay = pygame.Surface((SCREEN_WIDTH, SCREEN_HEIGHT), pygame.SRCALPHA)
        overlay.fill(self.bg_color)
        self.screen.blit(overlay, (0, 0))
        
        # Main panel
        panel_rect = pygame.Rect(self.panel_x, self.panel_y, self.panel_width, self.panel_height)
        pygame.draw.rect(self.screen, self.panel_color, panel_rect, border_radius=10)
        pygame.draw.rect(self.screen, self.border_color, panel_rect, 3, border_radius=10)
        
        # Current page
        current_page = self.pages[self.current_page]
        
        # Title
        title_text = self.font_title.render(f"Help - {current_page.title}", True, self.heading_color)
        title_rect = title_text.get_rect()
        title_rect.centerx = self.panel_x + self.panel_width // 2
        title_rect.y = self.panel_y + 15
        self.screen.blit(title_text, title_rect)
        
        # Content area
        content_y = self.panel_y + 50
        content_height = self.panel_height - 100
        content_rect = pygame.Rect(self.panel_x + 20, content_y, self.panel_width - 40, content_height)
        
        # Draw content with scrolling
        self._draw_scrollable_content(current_page, content_rect)
        
        # Navigation
        self._draw_navigation()
        
        # Instructions
        self._draw_instructions()
    
    def _draw_scrollable_content(self, page: HelpPage, content_rect: pygame.Rect):
        """Draw scrollable content"""
        # Create a surface for the content
        content_surface = pygame.Surface((content_rect.width, content_rect.height + 200), pygame.SRCALPHA)
        
        y_offset = -self.scroll_offset
        line_height = 22
        
        # Draw main content
        for line in page.content:
            if line.startswith("üéÆ") or line.startswith("üë•") or line.startswith("üìä") or line.startswith("üîß") or line.startswith("‚ùì"):
                # Section headers
                text_surface = self.font_heading.render(line, True, self.heading_color)
            elif line.startswith("‚Ä¢"):
                # Bullet points
                text_surface = self.font_normal.render(line, True, self.text_color)
            elif line.strip() == "":
                # Empty line
                y_offset += line_height // 2
                continue
            else:
                # Regular text
                text_surface = self.font_normal.render(line, True, self.text_color)
            
            if y_offset >= -line_height and y_offset < content_rect.height:
                content_surface.blit(text_surface, (10, y_offset))
            
            y_offset += line_height
        
        # Draw tips section
        if page.tips:
            y_offset += 20
            tips_header = self.font_heading.render("üí° Pro Tips:", True, self.tip_color)
            if y_offset >= -line_height and y_offset < content_rect.height:
                content_surface.blit(tips_header, (10, y_offset))
            y_offset += line_height + 5
            
            for tip in page.tips:
                tip_surface = self.font_small.render(tip, True, self.tip_color)
                if y_offset >= -line_height and y_offset < content_rect.height:
                    content_surface.blit(tip_surface, (10, y_offset))
                y_offset += line_height
        
        # Calculate max scroll
        self.max_scroll = max(0, y_offset + self.scroll_offset - content_rect.height + 40)
        
        # Blit content to screen with clipping
        self.screen.blit(content_surface, content_rect, 
                        (0, 0, content_rect.width, content_rect.height))
    
    def _draw_navigation(self):
        """Draw navigation buttons"""
        nav_y = self.panel_y + self.panel_height - 35
        
        # Previous button
        prev_color = self.key_color if self.current_page > 0 else (100, 100, 100)
        prev_text = self.font_normal.render("‚Üê Previous", True, prev_color)
        self.screen.blit(prev_text, (self.panel_x + 20, nav_y))
        
        # Page indicator
        page_text = f"Page {self.current_page + 1} of {len(self.pages)}"
        page_surface = self.font_normal.render(page_text, True, self.text_color)
        page_rect = page_surface.get_rect()
        page_rect.centerx = self.panel_x + self.panel_width // 2
        page_rect.y = nav_y
        self.screen.blit(page_surface, page_rect)
        
        # Next button
        next_color = self.key_color if self.current_page < len(self.pages) - 1 else (100, 100, 100)
        next_text = self.font_normal.render("Next ‚Üí", True, next_color)
        next_rect = next_text.get_rect()
        next_rect.right = self.panel_x + self.panel_width - 20
        next_rect.y = nav_y
        self.screen.blit(next_text, next_rect)
    
    def _draw_instructions(self):
        """Draw control instructions"""
        instructions = [
            "ESC/F1: Close Help",
            "‚Üê ‚Üí: Navigate Pages", 
            "‚Üë ‚Üì: Scroll",
            "Mouse Wheel: Scroll"
        ]
        
        instr_y = self.panel_y + self.panel_height + 10
        for i, instruction in enumerate(instructions):
            instr_surface = self.font_small.render(instruction, True, (200, 200, 200))
            instr_rect = instr_surface.get_rect()
            instr_rect.x = self.panel_x + (i * 150)
            instr_rect.y = instr_y
            self.screen.blit(instr_surface, instr_rect)
    
    def update(self, dt):
        """Update the help system"""
        pass  # No animations currently, but could add smooth scrolling here